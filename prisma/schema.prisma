generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Sex {
  MALE
  FEMALE
}

enum Temperament {
  PASSIVE
  NEUTRAL
  AGGRESSIVE
}

enum Role {
  ADMIN
  USER
}

model Todo {
  id        String  @id @default(cuid())
  title     String
  completed Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String

  @@index([authorId])
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model Vaccination {
  id            String   @id @default(cuid())
  name          String
  validTo       DateTime
  fileName      String
  uploadedS3Url String?
  Pet           Pet      @relation(fields: [petId], references: [id])
  petId         String
}

model Waiver {
  id            String   @id @default(cuid())
  name          String
  validTo       DateTime
  fileName      String
  uploadedS3Url String?
  Pet           Pet      @relation(fields: [petId], references: [id])
  petId         String
}

model Image {
  id            String  @id @default(cuid())
  fileName      String
  uploadedS3Url String?
  Pet           Pet     @relation(fields: [petId], references: [id])
  petId         String
}

model Pet {
  id                 String           @id @default(cuid())
  name               String
  ownerId            String
  breed              String
  sex                Sex
  age                Int
  weight             Int
  profileImage       String?
  ovariohysterectomy Boolean          @default(false)
  temperament        Temperament
  microchipNumber    String?
  medicalNotes       String?
  feedingNotes       String?
  petOwner           User             @relation(fields: [ownerId], references: [id])
  vaccinations       Vaccination[]
  Bookings           Bookings[]
  profileImages      Image[]
  IncidentReport     IncidentReport[]
  Waiver             Waiver[]
  Invoice            Invoice[]

  @@index([ownerId, id])
}

model Vet {
  id        String   @id @default(cuid())
  name      String
  address   String
  city      String
  phone     String
  user      User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime @default(now())

  @@index([ownerId, id])
}

model IncidentReport {
  id                  String   @id @default(cuid())
  Pet                 Pet      @relation(fields: [petId], references: [id])
  petId               String
  petName             String
  incidentDate        DateTime
  incidentCount       Int      @default(0)
  incidentDescription String
  createdAt           DateTime @default(now())

  @@index([petId])
}

model Services {
  id          String     @id @default(cuid())
  price       Decimal    @db.Decimal(5, 2)
  serviceName String     @unique
  bookings    Bookings[]
  Invoice     Invoice[]

  @@index([serviceName])
}

model Bookings {
  id               String    @id @default(cuid())
  petId            String
  serviceId        String
  createdAt        DateTime  @default(now())
  email            String
  updatedAt        DateTime? @updatedAt
  userId           String
  notes            String?
  phoneNumber      String
  checkInDate      String
  checkOutDate     String?
  endTime          String?
  firstName        String
  lastName         String
  petName          String
  serviceName      String
  startTime        String?
  confirmedBooking Boolean   @default(false)
  pet              Pet       @relation(fields: [petId], references: [id], onDelete: Cascade)
  service          Services  @relation(fields: [serviceId], references: [id])
  user             User      @relation(fields: [userId], references: [id])
  Invoice          Invoice[]

  @@index([userId, petId])
}

model Invoice {
  id              String   @id @default(uuid())
  booking         Bookings @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId       String
  pet             Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId           String
  petName         String
  createdAt       DateTime @default(now())
  service         Services @relation(fields: [serviceId], references: [id])
  serviceId       String
  serviceName     String
  servicePrice    Int
  serviceDuration Int
  customerName    String
  customerEmail   String
  customerAddress String
  subtotal        Int
  taxAmount       Int
  total           Int
  customerCity    String
  client          User     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId        String
  dueDate         DateTime
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String     @unique
  emailVerified DateTime?
  image         String?
  address       String?
  city          String?
  phoneNumber   String?
  postalCode    String?
  role          String     @default("user")
  pets          Pet[]
  bookings      Bookings[]
  accounts      Account[]
  sessions      Session[]
  todo          Todo[]
  vetInfo       Vet[]
  Invoice       Invoice[]

  @@index([id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
